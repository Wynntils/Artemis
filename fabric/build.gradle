buildscript {
    repositories {
        maven {
            url "https://jitpack.io/"
        }
    }

    /*
     This implements transformers to apply net.minecraftforge.eventbus.EventSubclassTransformer
     through the 2 following ways
     Architectury fabric transformer
     - Transforms relevant classes in dev environment at runtime
     - class EventBusTransform in com.github.wynntils:EventBusTransformer dependency
     GradleTask applyEventBus
     - Transforms relevant classes after shadowing jar for use in final jar
     - class Main in com.github.wynntils:EventBusTransformer dependency
     */

    dependencies {
        classpath "com.github.wynntils:EventBusTransformer:${event_bus_transformer_version}"
    }
}

plugins {
    id "com.github.johnrengelman.shadow" version "${shadow_version}"
}

import com.wynntils.eventbustransformer.EventBusTransform

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath
}

architectury {
    platformSetupLoomIde()
    fabric() { it.add(EventBusTransform.class) }
}

configurations {
    common
    // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    shadowCommon
    implementation.extendsFrom shadowImplementation
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

repositories {
    maven {
        url "https://jitpack.io"
    }
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"
    include(modImplementation(fabricApi.module("fabric-resource-loader-v0", fabric_version)))

    testImplementation(common(project(path: ":common", configuration: "namedElements"))) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }

    shadowImplementation("net.minecraftforge:eventbus:${forge_eventbus_version}") {
        exclude group: "org.ow2.asm"
        exclude group: "org.apache.logging.log4j"
        exclude group: "cpw.mods", module: "modlauncher"
    }

    // Hades Protocol
    shadowImplementation("com.github.wynntils:hades:v${hades_version}") { transitive false }
    shadowImplementation("com.github.wynntils:antiope:v${antiope_version}") { transitive false }

    include(implementation(annotationProcessor("io.github.llamalad7:mixinextras-fabric:${mixinextras_version}")))

    // EventBusTransform needs to only be available for the dev env at runtime and
    // does not need to be shadowed
    runtimeOnly "com.github.wynntils:EventBusTransformer:${event_bus_transformer_version}"
    modRuntimeOnly "me.djtheredstoner:DevAuth-fabric:${devauth_version}"

    testImplementation("net.fabricmc:fabric-loader-junit:${fabric_loader_version}")
    testImplementation("org.junit.jupiter:junit-jupiter:${junit_version}")
}

test {
    useJUnitPlatform()
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand("version": project.version)
    }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

jar {
    archiveClassifier = "dev"
}

shadowJar {
    configurations = [
        project.configurations.shadowCommon,
        project.configurations.shadowImplementation
    ]

    archiveClassifier = "dev-shadow"
}

tasks.register("applyEventBus", Jar) {
    inputs.file shadowJar.archiveFile
    archiveClassifier = "transformed-eventbus"
    dependsOn shadowJar
    doLast {
        javaexec {
            classpath = sourceSets.main.runtimeClasspath
            mainClass = "com.wynntils.eventbustransformer.Main"
            args(shadowJar.archiveFile.get(), archiveFile.get())
            workingDir = "${buildDir}"
        }
    }
}

remapJar {
    injectAccessWidener = true
    input.set applyEventBus.archiveFile
    dependsOn applyEventBus
    archiveClassifier = "fabric+MC-${minecraft_version}"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}
