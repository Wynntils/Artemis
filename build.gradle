plugins {
    id "architectury-plugin" version "3.4-SNAPSHOT"
    id "dev.architectury.loom" version "1.0-SNAPSHOT" apply false
    id "com.diffplug.spotless" version "6.3.0"
}

architectury {
    minecraft = rootProject.minecraft_version
}

// Add "wynntils.hotswap=true" to your personal gradle properties file to use hotswap.
// By default, this is C:\Users\<your username>\.gradle\gradle.properties on Windows
// or ~/.gradle/gradle.properties on Linux/MacOS.
def usingHotswapAgent = project.hasProperty('wynntils.hotswap') ? project.getProperty('wynntils.hotswap') == "true" : false

// If we are running in a CI environment, we want to use the version else dev version
version = "0.0.1-alpha.92"
if (!System.getenv("CI")) {
    version = "DEV"
}

subprojects {
    apply plugin: "dev.architectury.loom"

    repositories {
        maven { url = "https://pkgs.dev.azure.com/djtheredstoner/DevAuth/_packaging/public/maven/v1" }
        maven {
            name = "remote"
            // Adapt the URL for your remote repository
            url = uri("https://maven.pkg.github.com/Wynntils/Hades")
            credentials {
                // Use this if the repo requires auth
                // see https://docs.gradle.org/6.4/userguide/declaring_repositories.html#sec:supported_transport_protocols
                username = new String(Base64.getDecoder().decode("V3lubnRpbHNCb3Q="))
                password = new String(Base64.getDecoder().decode("Z2hwX09rY0lXaUEwUEhvTXk2Nk1odkRuZ08wbWZBNFp3SzNJTkQ3dw=="))
            }
        }
    }

    loom {
        silentMojangMappingsLicense()
        clientOnlyMinecraftJar()

        accessWidenerPath = file("src/main/resources/wynntils.accessWidener")

        runs {
            client {
                property("devauth.configDir", getRootProject().file(".devauth").absolutePath)
                if (usingHotswapAgent) {
                    vmArgs "-XX:+AllowEnhancedClassRedefinition"
                    vmArgs "-XX:HotswapAgent=fatjar"
                }
                vmArgs "-ea" // run dev builds with asserts
                client()
            }
        }
    }

    dependencies {
        minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"
        mappings loom.layered() {
            officialMojangMappings()
            parchment("org.parchmentmc.data:parchment-${rootProject.minecraft_version}:${rootProject.parchment_version}@zip")
        }
    }
}

allprojects {
    apply plugin: "java"
    apply plugin: "architectury-plugin"
    apply plugin: "com.diffplug.spotless"

    archivesBaseName = rootProject.archives_base_name
    version = rootProject.version

    repositories {
        maven { url "https://maven.parchmentmc.org/" }
    }

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
    }

    java {
        toolchain {
            languageVersion.set(JavaLanguageVersion.of(rootProject.java_version))
        }
        withSourcesJar()
    }

    spotless {
        java {
            // define the steps to apply to Java source code
            importOrder()
            removeUnusedImports()
            palantirJavaFormat('2.26.0')
            trimTrailingWhitespace()
            endWithNewline()
            // Custom rule from https://github.com/apache/geode
            custom 'Refuse wildcard imports', {
                if (it =~ /\nimport .*\*;/) {
                    throw new AssertionError("Do not use wildcard imports.  'spotlessApply' cannot resolve this issue.")
                }
            }
            custom 'Refuse IntelliJ annotations', {
                if (it =~ /\nimport org\.jetbrains\.annotations\./) {
                    throw new AssertionError("Do not use IntelliJ annotations.  'spotlessApply' cannot resolve this issue.")
                }
            }
            licenseHeader '/*\n' +
                    ' * Copyright Â© Wynntils $YEAR.\n' +
                    ' * This file is released under AGPLv3. See LICENSE for full license details.\n' +
                    ' */'
        }
        json {
            target 'src/**/*.json'
            gson()
                    .indentWithSpaces(2)
                    .sortByKeys()
                    .version('2.8.1')
            trimTrailingWhitespace()
            endWithNewline()
        }
        format 'misc', {
            // define the files to apply `misc` to
            target '*.gradle', '*.md', '.gitignore', '*.properties'
            targetExclude('CHANGELOG.md')

            // define the steps to apply to those files
            trimTrailingWhitespace()
            indentWithSpaces()
            endWithNewline()
        }
    }
}
