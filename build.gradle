plugins {
    id "architectury-plugin" version "3.4-SNAPSHOT"
    id "dev.architectury.loom" version "0.12.0-SNAPSHOT" apply false
    id "com.diffplug.spotless" version "6.3.0"
}

architectury {
    minecraft = rootProject.minecraft_version
}

subprojects {
    apply plugin: "dev.architectury.loom"

    repositories {
        maven { url = "https://pkgs.dev.azure.com/djtheredstoner/DevAuth/_packaging/public/maven/v1" }
    }

    loom {
        silentMojangMappingsLicense()

        accessWidenerPath = file("src/main/resources/wynntils.accessWidener")

        runs {
            client {
                property("devauth.configDir", getRootProject().file(".devauth").absolutePath)
                client()
            }
        }
    }

    dependencies {
        minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"
        mappings loom.layered() {
            officialMojangMappings()
            parchment("org.parchmentmc.data:parchment-${rootProject.minecraft_version}:${rootProject.parchment_version}@zip")
        }
    }
}

def versionObj = new Version(major: 1, minor: 1, patch: 0)

allprojects {
    apply plugin: "java"
    apply plugin: "architectury-plugin"
    apply plugin: "com.diffplug.spotless"

    archivesBaseName = rootProject.archives_base_name
    version = versionObj.toString(rootProject.minecraft_version)

    repositories {
        maven { url "https://maven.parchmentmc.org/" }
    }

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
    }

    java {
        toolchain {
            languageVersion.set(JavaLanguageVersion.of(rootProject.java_version))
        }
        withSourcesJar()
    }

    spotless {
        java {
            // define the steps to apply to Java source code
            importOrder()
            removeUnusedImports()
            palantirJavaFormat('2.17.0')
            trimTrailingWhitespace()
            endWithNewline()
            // Custom rule from https://github.com/apache/geode
            custom 'Refuse wildcard imports', {
                if (it =~ /\nimport .*\*;/) {
                    throw new AssertionError("Do not use wildcard imports.  'spotlessApply' cannot resolve this issue.")
                }
            }
            licenseHeader '/*\n' +
                    ' * Copyright Â© Wynntils $YEAR.\n' +
                    ' * This file is released under AGPLv3. See LICENSE for full license details.\n' +
                    ' */'
        }
        json {
            target 'src/**/*.json'
            gson()
                    .indentWithSpaces(2)
                    .sortByKeys()
                    .version('2.8.1')
            trimTrailingWhitespace()
            endWithNewline()
        }
        format 'misc', {
            // define the files to apply `misc` to
            target '*.gradle', '*.md', '.gitignore', '*.properties'

            // define the steps to apply to those files
            trimTrailingWhitespace()
            indentWithSpaces()
            endWithNewline()
        }
    }
}

class Version {
    int major, minor, patch

    static String getBuild() {
        System.getenv("BUILD_NUMBER") ?: System.getProperty("BUILD_NUMBER") ?: "DEV"
    }

    //If someone can find a way to access the mcVersion without using it as a param please do
    String toString(Object minecraft_version) {
        "${major}.${minor}.${patch}+${this.build}.MC${minecraft_version}"
    }
}
