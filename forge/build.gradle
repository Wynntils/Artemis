plugins {
    id "com.github.johnrengelman.shadow" version "${shadow_version}"
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath
    forge {
        mixinConfig("wynntils.mixins.json", "wynntils.mixins.forge.json")

        convertAccessWideners = true
        extraAccessWideners.add loom.accessWidenerPath.get().asFile.name
    }
}

architectury {
    platformSetupLoomIde()
    forge()
}

configurations {
    common
    // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    shadowCommon
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

dependencies {
    forge "net.minecraftforge:forge:${forge_version}"
    modRuntimeOnly "me.djtheredstoner:DevAuth-forge-latest:${devauth_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }

    // Hades Protocol
    include(forgeRuntimeLibrary("com.wynntils.hades:hades:${hades_version}"))

    implementation(annotationProcessor("com.github.llamalad7.mixinextras:mixinextras-common:${mixinextras_version}"))
    implementation(include("com.github.llamalad7.mixinextras:mixinextras-forge:${mixinextras_version}"))
}

processResources {
    inputs.property "version", rootProject.version

    filesMatching("META-INF/mods.toml") {
        expand "version": rootProject.version
    }
}

shadowJar {
    exclude "fabric.mod.json"

    configurations = [project.configurations.shadowCommon]

    classifier "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier "forge"
}

jar {
    classifier "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}
