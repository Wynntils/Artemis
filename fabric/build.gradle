buildscript {
    repositories {
        maven {
            url "https://maven.minecraftforge.net/"
        }
    }

    dependencies {
        classpath "net.minecraftforge:eventbus:${rootProject.forge_eventbus_version}"
    }
}

plugins {
    id "com.github.johnrengelman.shadow" version "7.1.0"
}

import dev.architectury.transformer.transformers.base.ClassEditTransformer
import dev.architectury.plugin.TransformingTask
import net.minecraftforge.eventbus.EventBusEngine
import org.objectweb.asm.ClassReader
import org.objectweb.asm.ClassWriter
import org.objectweb.asm.Type
import org.objectweb.asm.tree.ClassNode

architectury {
    platformSetupLoomIde()
    fabric {
        it.add(EventBusTransform.class)
    }
}

configurations {
    common
    // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    shadowCommon
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }

    implementation "net.minecraftforge:eventbus:${rootProject.forge_eventbus_version}"
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

shadowJar {
    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier null
}

jar {
    classifier "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

tasks.register("applyEventBus", TransformingTask) {
    it.group "Test"
    it.platform = "fabric"
    it.input.set shadowJar.archiveFile

    it.plusAssign(new EventBusTransform())
    println "running"

    //it.dependsOn jar
}

applyEventBus {
    dependsOn jar
}

build {
    dependsOn "applyEventBus"
}

class EventBusTransform implements ClassEditTransformer {
    @Override
    public dev.architectury.transformer.shadowed.impl.org.objectweb.asm.tree.ClassNode doEdit(String name, dev.architectury.transformer.shadowed.impl.org.objectweb.asm.tree.ClassNode node) {
        Type type = Type.getObjectType node.name
        if (EventBusEngine.INSTANCE.handlesClass type) {
            dev.architectury.transformer.shadowed.impl.org.objectweb.asm.ClassWriter architecturyClassWriter = new dev.architectury.transformer.shadowed.impl.org.objectweb.asm.ClassWriter(0)
            node.accept(architecturyClassWriter)
            ClassReader normalClassReader = new ClassReader(architecturyClassWriter.toByteArray())
            ClassNode normalNode = new ClassNode()
            normalClassReader.accept(normalNode, 0)

            EventBusEngine.INSTANCE.processClass(normalNode, type)
            println "test"
        }
        node.sourceFile = "test"
        return node
        //EventBusEngine.INSTANCE.processClass(node, )
    }
}
