buildscript {
    repositories {
        maven {
            url "https://jitpack.io/"
        }

        /*
        This implements the forge eventbus transformers, through the 2 following ways

        Architectury fabric transformer
        - Transforms relevant classes at runtime
        - Reason for dependencies implementation
        - class EventBusTransform in repo

        GradleTask applyEventBus
        - Transforms relevant classes after shadowing jar
        - Reason for buildscript classpath
        - class Main in repo
         */
        dependencies {
            classpath "com.github.coehlrich:EventBusTransformer:main-SNAPSHOT"
        }
    }
}

plugins {
    id "com.github.johnrengelman.shadow" version "7.1.0"
}

import com.wynntils.eventbustransformer.EventBusTransform

architectury {
    platformSetupLoomIde()
    fabric()
            {
                it.add(EventBusTransform.class)
            }
}

configurations {
    common
    // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    shadowCommon
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

repositories {
    maven {
        url "https://jitpack.io"
    }
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }

    implementation "net.minecraftforge:eventbus:${rootProject.forge_eventbus_version}"
    implementation "com.github.coehlrich:EventBusTransformer:main-SNAPSHOT"
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
        expand "minecraft_version": ">=${rootProject.minecraft_version}"
    }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

jar {
    classifier "dev"
}

shadowJar {
    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
}

task applyEventBus(type: Jar) {
    inputs.file shadowJar.archiveFile
    classifier "transformed-eventbus"
    dependsOn shadowJar
    doLast {
      javaexec {
        classpath = sourceSets.main.runtimeClasspath
        mainClass = "com.wynntils.eventbustransformer.Main"
        args(shadowJar.archiveFile.get(), archiveFile.get())
        workingDir = "${buildDir}"
      }
    }
}

remapJar {
    input.set applyEventBus.archiveFile
    dependsOn applyEventBus
    classifier null
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}
